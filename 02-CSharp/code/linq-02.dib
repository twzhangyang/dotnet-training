#!csharp

class Student {
  public int StudentID {get;set;}
  public string StudentName {get;set; }
  public int Age {get;set;}
}

#!markdown

## OfType

#!csharp

IList mixedList = new ArrayList();
mixedList.Add(0);
mixedList.Add("One");
mixedList.Add("Two");
mixedList.Add(3);
mixedList.Add(new Student() { StudentID = 1, StudentName = "Bill" });

var stringResult = from s in mixedList.OfType<string>()
                select s;
stringResult

#!csharp

var stringResult = mixedList.OfType<string>();
stringResult

#!csharp

var intResult = from s in mixedList.OfType<int>()
                select s;
intResult

#!csharp

//???

#!markdown

## OrderBy

#!csharp

IList<Student> studentList = new List<Student>() { 
  new Student() { StudentID = 1, StudentName = "John", Age = 18 } ,
  new Student() { StudentID = 2, StudentName = "Steve",  Age = 15 } ,
  new Student() { StudentID = 3, StudentName = "Bill",  Age = 25 } ,
  new Student() { StudentID = 4, StudentName = "Ram" , Age = 20 } ,
  new Student() { StudentID = 5, StudentName = "Ron" , Age = 19 } 
};

#!csharp

var orderByResult = from s in studentList
                   orderby s.StudentName 
                   select s;
orderByResult

#!csharp

//???

#!csharp

var orderByDescendingResult = from s in studentList
                   orderby s.StudentName descending
                   select s;
orderByDescendingResult

#!csharp

//???

#!csharp

var orderByResult = from s in studentList
                   orderby s.StudentName, s.Age 
                   select new { s.StudentName, s.Age };
orderByResult

#!csharp

//???
